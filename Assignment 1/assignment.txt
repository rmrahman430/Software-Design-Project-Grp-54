Group members: Rayyan Rahman, Abdul Sami Ahmed

1. Since predicting the fuel rate based on the client profile is the primary goal of the application, I will first complete the formula for how the prediction will function based on the stated criteria, specifically the percentage distribution of how each criterion will contribute to the anticipated fuel rate. Next, in order to determine who will use the program, what features (software components) each user can access, and what are the precise expectations for each feature's behavior when it is used or performed, I will draft a user story document. To map out the application's internal structure, I'd create a UML class diagram starting with key classes like Client, Quote, and FuelPriceModel. Each class holds specific attributes (data) and methods (actions). Relationships like "Client has a Profile" or "QuoteService uses FuelPriceModel" connect these classes, showing how they interact. Inheritance could be used for different client types or quote categories. Further details like data types, access levels, and operation parameters refine the design.
2. An Agile development method would be most effective for the development of this software. Agile allows for developing software iteratively, effective and frequent communication with stakeholders, and the ability to adapt to changing requirements. Given the complexity of the application and the need for client input, Agile's flexibility and ability to adapt with change aligns well with the project's demands. It also allows for continuous testing and refinement, ensuring a more responsive and user-centric end product.
3. The high-level design will center around three core components: the frontend, backend, and database. For the frontend, we will utilize React.js, renowned for its user-friendly interface capabilities. This choice will facilitate the creation of seamless interfaces for essential features such as registration, login, profile management, and fuel quote submission. On the backend, Node.js will serve as the backbone, efficiently managing critical operations like user data handling, fuel quotes, and pricing calculations. This will encompass key modules such as User Management, Profile Management, Quote Management, and a dedicated Pricing Module for meticulous rate calculation. We will employ PostgreSQL for our database needs, ensuring robust and secure storage of user and transaction data. Furthermore, the development of this project will adhere to Agile principles, employing an iterative process that emphasizes regular feedback and continuous improvement. This approach will not only enhance the robustness and scalability of the project but also ensure it is finely tuned to user requirements. Comprehensive design documents, including user stories and UML diagrams, will be integral to this process, providing clarity and detailed guidance every step of the way.
